
// recoded in Scala from C
// @see https://en.wikipedia.org/wiki/Romberg%27s_method

package scalation.calculus

import scala.math.{E, exp, pow}

import scalation.util.banner

object Integral
{
    private val MAX    = 8
    private val SUBDIV = 96

    private val _1_2  = 1.0 / 2.0
    private val _1_3  = 1.0 / 3.0
    private val _3_8  = 3.0 / 8.0
    private val _2_45 = 2.0 / 45.0

    private val c_simp = Array (2.0, 4.0)
    private val c_sp38 = Array (2.0, 3.0, 3.0)
    private val c_bool = Array (14.0, 32.0, 12.0, 32.0)

    def trap (a: Double, b: Double, f: Double => Double, sd: Int = SUBDIV): Double =
    {
        var x = a
        val dx = (b - a) / sd
        var sum = f(a) + f(b)
        for (i <- 1 until sd) { x += dx; sum += 2.0 * f(x) }
        _1_2 * dx * sum
    } // trap

    def simpson (a: Double, b: Double, f: Double => Double, sd: Int = SUBDIV): Double =
    {
        var x = a
        val dx = (b - a) / sd
        var sum = f(a) + f(b)
        for (i <- 1 until sd) { x += dx; sum += c_simp (i % 2) * f(x) }
        _1_3 * dx * sum
    } // simpson

    def simpson38 (a: Double, b: Double, f: Double => Double, sd: Int = SUBDIV): Double =
    {
        var x = a
        val dx = (b - a) / sd
        var sum = f(a) + f(b)
        for (i <- 1 until sd) { x += dx; sum += c_sp38 (i % 3) * f(x) }
        _3_8 * dx * sum
    } // simpson38

    def boole (a: Double, b: Double, f: Double => Double, sd: Int = SUBDIV): Double =
    {
        var x = a
        val dx = (b - a) / sd
        var sum = 7.0 * (f(a) + f(b))
        for (i <- 1 until sd) { x += dx; sum += c_bool (i % 4) * f(x) }
        _2_45 * dx * sum
    } // boole

// http://www.math.usm.edu/lambers/mat460/fall09/lecture29.pdf

    def romberg (a: Double, b: Double, f: Double => Double): Double =
    {
        val t_o = Array.ofDim [Double] (MAX)
        val t_j = Array.ofDim [Double] (MAX)
        var h = b - a

        for (j <- 1 until MAX) {
            val sd = pow (2, j-1).toInt
            println ("sd = " + sd)
//          t_j(j) = trap (a, b, f, sd)              // composite trapezoidal rule
            t_j(j) = simpson (a, b, f, sd)           // composite Simpson's rule
        } // for
        println ("t_j = " + t_j.deep)

        for (j <- 1 until MAX) {
            for (k <- 1 until j) {
                 val den = pow (4, k) - 1.0
                 t_o(k)  = t_j(k)
                 t_j(k)  = t_j(k-1) + (t_j(k-1) - t_o(k-1)) / den
            } // for   
            h /= 2.0
            println ("t_j = " + t_j.deep)
        } // for   
        t_j(MAX-1)
    } // romberg

    def test (a: Double, b: Double, f: Double => Double, ans: Double, sd: Int = SUBDIV)
    {
        val itrap = trap (a, b, f, sd)
        val isimp = simpson (a, b, f, sd)
        val isp38 = simpson38 (a, b, f, sd)
        val ibool = boole (a, b, f, sd)
        val iromb = romberg (a, b, f)

        println (s"trap integral = $itrap,\t % error = ${100.0 * (ans - itrap)/ans}") 
        println (s"simp integral = $isimp,\t % error = ${100.0 * (ans - isimp)/ans}") 
        println (s"sp38 integral = $isp38,\t % error = ${100.0 * (ans - isp38)/ans}") 
        println (s"bool integral = $ibool,\t % error = ${100.0 * (ans - ibool)/ans}") 
        println (s"romb integral = $iromb,\t % error = ${100.0 * (ans - iromb)/ans}") 
    } // test

} // Integral object


class GaussianFunc (a: Double, b: Double, c: Double)
{
    private val den = 2.0 * c * c 

    def gaussianf (x: Double): Double =
    {   
        a * pow (E, - (x - b) * (x - b) / den)
    } // gaussianf

} // GaussianFunc class


// run-main scalation.calculus.IntegralTest

object IntegralTest extends App
{
    banner ("integral of x")
    def f1 (x: Double): Double = x
    Integral.test (0.0, 2.0, f1, 2.0)

    banner ("integral of x^2")
    def f2 (x: Double): Double = x * x
    Integral.test (0.0, 3.0, f2, 9.0)

    banner ("integral of x^3")
    def f3 (x: Double): Double = x * x * x
    Integral.test (0.0, 4.0, f3, 64.0)

    // @see www.umiacs.umd.edu/~ramani/cmsc460/Lecture15_integration.pdf
    banner ("integral of x exp (2x)")
    val ans = 0.25 * (1.0 + 7.0 * exp (8.0))
    def f4 (x: Double): Double = x * exp (2.0 * x)
    Integral.test (0.0, 4.0, f4, ans)

} // IntegralTest object


// run-main scalation.calculus.IntegralTest2

object IntegralTest2 extends App
{
    val gf = new GaussianFunc (1.0, 0.0, 1.0)

    Integral.trap (0.0, 1.0, gf.gaussianf)
    Integral.simpson (0.0, 1.0, gf.gaussianf)
    Integral.romberg (0.0, 1.0, gf.gaussianf)

} // IntegralTest2 object

