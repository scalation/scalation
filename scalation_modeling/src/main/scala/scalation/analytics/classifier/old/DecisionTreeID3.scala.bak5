
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  Kevin Warrick, John Miller, Susan George
 *  @version 1.5
 *  @date    Wed Jan  9 15:07:13 EST 2013
 *  @see     LICENSE (MIT style license file).
 */

package scalation.analytics.classifier

import scala.collection.Set
import scala.collection.mutable.{ArrayBuffer, HashMap}
import scala.math.{ceil, floor, log, pow}
import scala.util.control.Breaks._

import scalation.analytics.Probability.entropy
import scalation.linalgebra.{MatriI, MatrixI, VectoD, VectorD, VectoI, VectorI}
import scalation.random.PermutedVecI
import scalation.random.RNGStream.ranStream
import scalation.util.banner

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `DecisionTreeID3` class implements a Decision Tree classifier using the
 *  ID3 algorithm.  The classifier is trained using a data matrix 'x' and a
 *  classification vector 'y'.  Each data vector in the matrix is classified into
 *  one of 'k' classes numbered '0, ..., k-1'.  Each column in the matrix represents
 *  a feature (e.g., Humidity).  The 'vc' array gives the number of distinct values
 *  per feature (e.g., 2 for Humidity).
 *  @param x   the data vectors stored as rows of a matrix
 *  @param y   the class array, where y_i = class for row i of the matrix x
 *  @param fn  the names for all features/variables
 *  @param k   the number of classes
 *  @param cn  the names for all classes
 *  @param vc  the value count array indicating number of distinct values per feature
 */
class DecisionTreeID3 (x: MatriI, y: VectoI, fn: Array [String], k: Int, cn: Array [String],
                       private var vc: Array [Int] = null, treeDepth: Int = -1)
      extends ClassifierInt (x, y, fn, k, cn)
{
    private val DEBUG           = true                     // debug flag
    private val depthConstraint = treeDepth >= 0           // tree depth constraint flag
    if (vc == null) vc          = vc_default               // set value count (vs) to default for binary data (2)
    private val y_prob          = new VectorD (k)          // probability that class y occurs
    for (i <- 0 until m) y_prob(y(i)) += 1
    y_prob /= md
    private val entropy_0 = entropy (y_prob)               // the initial entropy

    private var root: DNode     = null                     // the root node
    private var listOfLeaves    = ArrayBuffer [LNode] ()   // list of leaf nodes
    private var optPruneEntropy = Double.MaxValue          // variable to hold optimal entropy of node to prune
    private var toPruneNode: DNode = null                  // stores the node to be pruned

    if (DEBUG) println ("the initial entropy entropy_0 = " + entropy_0)

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Set the root.
     *  @param root_  the root node
     */
    def setRoot (root_ : DNode) { root = root_ }

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Given a feature column (e.g., 2 (Humidity)) and a value (e.g., 1 (High))
     *  use the frequency of occurrence of the value for each classification
     *  (e.g., 0 (no), 1 (yes)) to estimate k probabilities.  Also, determine
     *  the fraction of training cases where the feature has this value
     *  (e.g., fraction where Humidity is High = 7/14).
     *  @param dset   the list of data set tuples to consider (e.g., value, row index)
     *  @param value  one of the possible values for this feature (e.g., 1 (High))
     */
    def frequency (dset: Array [(Int, Int)], value: Int): (Double, VectoI, VectoD) =
    {
        val prob = new VectorD (k)                     // probability vector for a given feature and value
        val freq = new VectorI (k)
        var count = 0.0
        for ((i, j) <- dset if i == value) {
            count   += 1.0
            prob(j) += 1.0
            freq(j) += 1
        } // for
        (count / dset.size, freq, prob / count)        // return the fraction and the probability vector
    } // frequency

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Extract column from matrix, filtering out values rows that are not on path.
     *  @param f  the feature to consider (e.g., 2 (Humidity))
     *  @param p  the path
     *  FIX - too complex - simplify
     */
    def dataset (f: Int, path: List [(Int, Int)]): Array [(Int, Int)] =
    {
        val col = x.col(f).apply.zipWithIndex
        col.filter (t => path.forall (tt => x(t._2, tt._1) == tt._2)).map (t => (t._1, y(t._2))).toArray
    } // dataset

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Find the most frequent classification.
     *  @param a  array of discrete classifications
     *  FIX - use argmax instead of mode, so this method can be removed?
     */
    def mode (a: Array [Int]): Int =
    {
        a.groupBy (i => i).map (t => (t._1, t._2.size)).maxBy (_._2)._1
    } // mode

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compute the information gain due to using the values of a feature/attribute
     *  to distinguish the training cases (e.g., how well does Humidity with its
     *  values Normal and High indicate whether one will play tennis).
     *  @param f     the feature to consider (e.g., 2 (Humidity))
     *  @param path  the path
     */
    def gain (f: Int, path: List [(Int, Int)]): (Double, VectoI) =
    {
        val dset = dataset (f, path)                           // extract values from column f indata matrix x
        val vals = vc(f)                                       // number of distinct values for feature f
        var sum  = 0.0
        val freq = new VectorI (k)
        for (i <- 0 until vals) {
            val (coun_fi, distr_fi, prob_fi) = frequency (dset, i)
            val entr_fi = entropy (prob_fi)                    // entropy for feature f value i
            if (DEBUG) println (s"gain from feature $f for value $i is $entr_fi")
            sum  += coun_fi * entr_fi
            freq += distr_fi
        } // for
        val igain = entropy_0 - sum                            // the drop in entropy
        if (DEBUG) println (s"entropy = $sum : overall gain from feature $f is $igain")
        (igain, freq)                                          // return the fraction and the probability vector
    } // gain

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train the decision tree.
     *  @param itest  the indices for the test data
     *  FIX use itest
     */
    def train (itest: IndexedSeq [Int]): DecisionTreeID3 =    // FIX - use these parameters
    {
        root = buildTree (List [(Int, Int)] (), 0)
        printTree ()
        println ("Entropy of tree = " + calcEntropy (listOfLeaves))
        println ("No of leaves (original) = " + listOfLeaves.size)
        this
    } // train

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Calculate the entropy given the list of leaves.
     *  @param listOfLeaves  list of leaves whose entropy needs to be calculated
     */
    def calcEntropy (listOfLeaves: ArrayBuffer [LNode]): Double =
    {
        var sum = 0.0
        for (n <- listOfLeaves) sum += n.freqSum * entropy (n.freq)
        sum / md
    } // calcEntropy

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Extend the tree given a path e.g. ((outlook, sunny), ...).
     *  @param path   an existing path in the tree ((feature, value), ...)
     *  @param depth  FIX - add comment
     */
    def buildTree (path: List [(Int, Int)], depth: Int): FNode =
    {
        val features = ((0 until x.dim2) diff path.map(_._1))
        
        var opt = (0, gain(0, path))
        for (f <- features) {
            val (fGain, freq) = gain (f, path)
            if (DEBUG) println (s"for feature $f the gain is $fGain")
            if (fGain > opt._2._1) opt = (f, (fGain, freq))
        } // for
        if (DEBUG) println (s"optimal feature is ${opt._1} with a gain of ${opt._2._1}")

        val f = opt._1
        val node = FNode (f, new HashMap [Int, DNode], path, opt._2._2)

        breakable { for (b <- 0 until vc(f)) {               // build subtree or leaf for each branch value
            if (depthConstraint && depth == treeDepth - 1) {
                addLeaf (node.freq.argmax (), node.freq, node, b); break
            } else {
                // base case
                val dset = dataset (f, (f, b) :: path)
                if (dset.size > 0) {
                    if (features.size == 0 || dset.map (_._2).toSet.size == 1) {
                        addLeaf (mode (dset.map (_._2)), getDistCt (dset), node, b)
                    } else {
                        node.branch += b -> buildTree ((f, b) :: path, depth+1)
                    } // if
                } // if
            } // if
        }} // breakable for
        node
    } // buildTree

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Add leaf to tree.
     *  @param y      output value of leaf node
     *  @param freq   distribution count of leaf
     *  @param pnode  parent node
     *  @param b      branch identifier to add leaf
     */
    def addLeaf (y: Int, freq: VectoI, pnode: FNode, b: Int)=
    {
        val leaf = LNode (y, freq, pnode)
        pnode.branch += b -> leaf
        listOfLeaves += leaf
    } // addLeaf

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Get the distribution count of a node, i.e., determines the number of
     *  positive and negative samples under it.
     *  @param dset  the dataset under a node
     */
    def getDistCt (dset: Array [(Int, Int)]): VectoI =
    {
        val freq = new VectorI (k)
        for ((i, j) <- dset) freq(j) += 1
        freq
    } // getDistCt

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Prune the tree.  If entropy of node considered for pruning < threshold,
     *  then remove the node from the decision tree.
     *  @param threshold   user-specified threshold which controls pruning.
     *  @param fold        defines cross-validation folds
     */
    def prune (threshold: Double, fold: Int = 5): DecisionTreeID3 =
    {
        println (s"pruning ($threshold, $fold)")
        val unprunedTree = this                                     // get instance of current tree which is an unpruned tree
        val prunedTree   = new DecisionTreeID3 (x, y, fn, k, cn, vc, treeDepth)
        prunedTree.setRoot (unprunedTree.root.copy (vc))            // set root of pruned tree same as that of unpruned tree but diffrent instance
        unprunedTree.listOfLeaves.copyToBuffer (prunedTree.listOfLeaves)
        performPruning (prunedTree, threshold)

        println (unprunedTree.root)
        println (prunedTree.root)
        println ("Entropy of unpruned tree: " + calcEntropy (unprunedTree.listOfLeaves))
        println ("Entropy of pruned tree:   " + calcEntropy (prunedTree.listOfLeaves))

        compareModel (fold, threshold)                              // compare pruned and unpruned tree using CV
        prunedTree
    } // prune

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Prune the tree if entropy of the identified pruneNode is less than threshold
     *  @param prunedTree  tree to prune
     *  @param threshold   user-specified threshold which controls pruning
     */
    def performPruning (prunedTree: DecisionTreeID3, threshold: Double): Boolean =
    {
        println (s"performPruning ($prunedTree, $threshold)")
        var isPruned = false
        val (node2Prune, diffEntropy) = findNodeToPrune (prunedTree)               // returns the node along with entropy difference
        println (s"node2Prune = $node2Prune")
        if (node2Prune != null) {
            val nodeToPrune = node2Prune.asInstanceOf [FNode]                     // node to prune
            println (s"Node identified to be pruned: $nodeToPrune : $diffEntropy")
            if (diffEntropy < threshold) {                                        // if entropy diffrence < threshold, remove node from tree
                val dset    = dataset (nodeToPrune.f, nodeToPrune.path)
                val m       = mode (dset.map (_._2))
                var pt      = getPrunedTree (prunedTree, prunedTree.root, nodeToPrune, m)    // get the pruned tree
                isPruned    = true
                toPruneNode = null
                optPruneEntropy = Double.MaxValue
                if (! pt._2) {
                    println (s"Entropy of prunedTree = ${calcEntropy (prunedTree.listOfLeaves)} : ${prunedTree.listOfLeaves.size}")
                    performPruning (prunedTree, threshold)          // repeat this process until entropy of node > threshold
                } // if
            } // if
      } // if
      isPruned
    } // performPruning

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Fine the node with min entropy as node to prune.
     *  @param prunedTree  finds if any child of the current node has its c
     */
    def findNodeToPrune (prunedTree: DecisionTreeID3): (DNode, Double) =
    {
        println (s"findNodeToPrune ($prunedTree)")
        var tLeavesList = ArrayBuffer [LNode] ()
        prunedTree.listOfLeaves.copyToBuffer (tLeavesList)
        for (n <- prunedTree.listOfLeaves) {
            println (s"check leaf node $n")
            if (tLeavesList contains n) {
                val parent = n.parentNode
                var isChildLeaves = checkIfChildLeaves (parent)
                println (s"isChildLeaves = $isChildLeaves")
                if (isChildLeaves) {
println ("before")
                    val sibling       = tLeavesList.filter (leafNode => leafNode.parentNode == parent)
println (s"tLeavesList = $tLeavesList, sibling = $sibling")
                    for (sib <- sibling if tLeavesList contains sib) tLeavesList -= sib
//                  tLeavesList       = tLeavesList diff sibling
println ("after")
                    val parentEntropy = entropy (parent.freq)               // calculate the entropy of the parent node
                    val childEntropy  = calcEntropy (sibling)               // calculate the entropy of all the leaf nodes under the parent
                    val delta         = parentEntropy - childEntropy        // find the difference between parent and children entropy
                    if (delta < optPruneEntropy) {                          // get the min entropy diffrence
                        optPruneEntropy = delta
                        toPruneNode     = parent
                    } // if
                } else {
                    tLeavesList = tLeavesList.filter (leafNode => leafNode.parentNode != parent)
                } // if
            } // if
            println (s"findNodeToPrune = ($toPruneNode, $optPruneEntropy)")
        } // for
        (toPruneNode, optPruneEntropy)
    } // findNodeToPrune

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Check if all the children of a feature node are instances of LeafNode.
     *  @param node  checks if all the children of this node are instances of LeafNode
     */
    def checkIfChildLeaves (node: FNode): Boolean =
    {
        println (s"checkIfChildLeaves ($node)")
        var isChildLeaves = true
        var it = node.branch.valuesIterator
        it.foreach ((cNode) => if (! cNode.isInstanceOf [LNode]) isChildLeaves = false)
        isChildLeaves
    } // checkIfChildLeaves

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the pruned tree by deleting the node identified to prune.
     *  @param tree      tree to prune
     *  @param currNode  current node
     *  @param delNode   node to remove
     *  @param m         most frequent classification of 'delNode'
     */
    def getPrunedTree (tree: DecisionTreeID3, currNode: DNode, delNode: FNode, m: Int):
        (DecisionTreeID3, Boolean) =
    {
        var isRoot     = false
        val prunedTree = tree
        val n          = currNode
        if (delNode.path.size > 0) {                                              // checks if the node to be pruned is root
            val parBranch = delNode.path(0)._2
            var parPath   = delNode.path.drop (1)
            if (n.isInstanceOf [FNode]) {
                val parentNode = n.asInstanceOf [FNode]
                if (parentNode.path equals parPath) {                             // FIX == won't work?
                    convertFeature2Leaf (prunedTree, parentNode, parBranch, m)    // converts feature node to leaf node
                } else {
                    var it = parentNode.branch.valuesIterator
                    it.foreach ((cNode) => if (cNode.isInstanceOf [FNode]) {
                        val temp = cNode.asInstanceOf [FNode]
                        getPrunedTree (prunedTree, temp, delNode, m)
                    }) // foreach
                } // if
            } // if
        } else {
            println ("At Root level: cannot be further pruned")
            isRoot = true
        } // if
        (prunedTree, isRoot)
    } // getPrunedTree

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Convert a feature node to leaf node.
     *  @param tree    the tree to prune
     *  @param parent  the parent node
     *  @param bran    the index of child under parent node to be converted to leaf
     *  @param m       mode of child under index=branch
     */
    def convertFeature2Leaf (tree: DecisionTreeID3, parent: FNode, bran: Int, m: Int): LNode =
    {
        val fn = parent.branch (bran).asInstanceOf [FNode]
        println (s"parent = $parent, fn = $fn")
        tree.listOfLeaves = tree.listOfLeaves
            .filterNot (leafNode => leafNode.parentNode == fn)     // update listOfLeaves to remove all leaf nodes under fn
        val ln = LNode (m, fn.freq, parent)
        parent.branch.put (bran, ln)                               // updates the branch with new leaf
        tree.listOfLeaves += ln                                    // add the new leaf node to listOfLeaves
        ln
    } // convertFeature2Leaf

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compare the pruned versus unpruned via cross-validation.
     *  @param folds      specfies the fold required for CV
     *  @param threshold  specifies the user-defined threshold for pruning
     */
    def compareModel (folds: Int, threshold: Double) =
    {
        banner ("Compare Models")

        // for random cross validation
        var u_score     = new MatrixI (k, k)                                      // unpruned scores
        var p_score     = new MatrixI (k, k)                                      // pruned scores
        val permutedVec = PermutedVecI (VectorI.range (0, x.dim1), ranStream)
        val randOrder   = permutedVec.igen
        val itestA      = randOrder.split (folds)                                 // array of testset indices

        for (it <- 0 until folds) {
            val itest = itestA(it)().toArray                                      // get test data
            val testX = x.selectRows (itest)
            val testY = y.select (itest)

            val itrain = Array.range (0, x.dim1) diff itest                       // get training data
            val trainX = x.selectRows (itrain)
            val trainY = y.select (itrain)

            banner ("Model for fold = " + it)

            var uTree = new DecisionTreeID3 (trainX, trainY, fn, 2, cn, vc, treeDepth)   // create an unpruned tree with (n-1) fold data
            uTree.train (itest)
            var yp = VectorI (for (i <- testX.range1) yield
                                  uTree.classify (testX(i))._1)                   // test the unpruned tree with the remaining 1 fold data
            u_score += new ConfusionMat (testY, yp, k).confusion                  // get the score metrics for unpruned tree

            var pTree = new DecisionTreeID3 (trainX, trainY, fn, 2, cn, vc, treeDepth)   // create pruned tree with (n-1) fold data
            pTree.setRoot (uTree.root.copy (vc))
            uTree.listOfLeaves.copyToBuffer (pTree.listOfLeaves)
            performPruning (pTree, threshold)
            var yp1 = VectorI (for (i <- testX.range1) yield
                                   pTree.classify (testX(i))._1)                  // test the pruned tree with the remaining 1 fold data
            p_score += new ConfusionMat(testY,yp1,k).confusion                    // get the score metrics for pruned tree

            println ("Entropy Unpruned = " + calcEntropy (uTree.listOfLeaves) +
                     " Entropy Pruned = "  + calcEntropy (pTree.listOfLeaves))
        } // for

        u_score /= folds                                                          // average of unpruned scores
        p_score /= folds                                                          // average of pruned scores

        println ("Unpruned tree: \t TN = " + u_score(0, 0) + " FP = " + u_score(0, 1) +
                                  " FN = " + u_score(1, 0) + " TP = " + u_score(1, 1))
        println ("Pruned tree:   \t TN = " + p_score(0, 0) + " FP = " + p_score(0, 1) +
                                  " FN = " + p_score(1, 0) + " TP = " + p_score(1, 1))

    } // compareModel
  
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Print the decision tree.
     */
    def printTree () { println ("Decision Tree"); printT (root, 0, -1); println () }
  
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Recursively print the decision tree nodes.
     *  @param n      the current node
     *  @param level  level of the tree
     *  @param bran   branch of the tree
     */
    private def printT (n: DNode, level: Int, bran: Int)
    {
        print ("\n" + "\t" * level + "[ ")
        n match {
        case FNode (f, branch, path, freq) =>
            println (s"FNode[${n.id}] b$bran : f = x$f ( ${freq(0)}-, ${freq(1)}+ ) ]")
            for (b <- 0 until vc(f)) {
                if (branch.get(b) != None) {
                    val node = branch.get(b).get
                    printT (node, level + 1, b)
                } // if
            } // for
        case LNode (y, freq, parent) =>
            println (s"LNode[${n.id}] b$bran : y = $y ( ${freq(0)}-, ${freq(1)}+ ) ]")
        } // match
    } // printT

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Given a data vector z, classify it returning the class number (0, ..., k-1)
     *  by following a decision path from the root to a leaf.  If no branch found
     *  given maximal decision of current node.
     *  Return the best class, its name and FIX.
     *  @param z  the data vector to classify
     */
    def classify (z: VectoI): (Int, String, Double) =
    {
        var n = root
        for (j <- z.range) {
            n match {
            case FNode (f, branch, path, count) => 
                try { n = branch (z(f)) }
                catch { case nse: NoSuchElementException =>
                    val best = n.asInstanceOf [FNode].freq.argmax ()
                    return (best, cn(best), -1.0)
                } // try
            case LNode (y, count, parent) => 
                val best = y
                return (best, cn(best), -1.0)
            case _ =>
                println (s"classify: 'n match' failed for node n = $n")   // FIX - null branch?
                return (-1, "?", -1.0)
            } // match
        } // for
        println ("classify: failed at leaf node")
        (-1, "?", -1.0)
    } // classify

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Reset or re-initialize the frequency tables and the probability tables.
     */
    def reset ()
    {
        // FIX: to be implemented
    } // reset

} // DecisionTreeID3 class


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `DecisionTreeID3Test` object is used to test the `DecisionTreeID3` class.
 *  Ex: Classify (No/Yes) whether a person will play tennis based on the measured features.
 *  @see http://www.cise.ufl.edu/~ddd/cap6635/Fall-97/Short-papers/2.htm
 *  > runMain scalation.analytics.classifier.DecisionTreeID3Test
 */
object DecisionTreeID3Test extends App
{
    // training-set -----------------------------------------------------------
    // Outlook:     Rain (0), Overcast (1), Sunny (2)
    // Temperature: Cold (0), Mild (1), Hot (2)
    // Humidity:    Normal (0), High (1)
    // Wind:        Weak (0), Strong (1)
    // features:                Outlook Temp Humidity Wind
    val x  = new MatrixI ((14, 4),  2,     2,     1,     0,       // day  1 - data matrix
                                    2,     2,     1,     1,       // day  2
                                    1,     2,     1,     0,       // day  3
                                    0,     1,     1,     0,       // day  4
                                    0,     0,     0,     0,       // day  5
                                    0,     0,     0,     1,       // day  6
                                    1,     0,     0,     1,       // day  7
                                    2,     1,     1,     0,       // day  8
                                    2,     0,     0,     0,       // day  9
                                    0,     1,     0,     0,       // day 10
                                    2,     1,     0,     1,       // day 11
                                    1,     1,     1,     1,       // day 12
                                    1,     2,     0,     0,       // day 13
                                    0,     1,     1,     1)       // day 14
    // day:           1  2  3  4  5  6  7  8  9 10 11 12 13 14
    val y  = VectorI (0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0)   // classification vector: 0(No), 1(Yes))
    val vc = Array (3, 3, 2, 2)                                   // distinct values for each feature
    val fn = Array ("Outlook", "Temp", "Humidity", "Wind")
    val cn = Array ("Yes", "No")
    val k  = cn.size

    println (s"x  = $x")
    println (s"y  = $y")
    println (s"vc = ${vc.deep}")
    println ("-" * 60)

    banner ("Create and Train the DecisionTreeID3 Classifier")
    val id3 = new DecisionTreeID3 (x, y, fn, k, cn, vc)           // create the classifier            
    id3.train ()

    banner ("Classify All Instances in Dataset")
    val yp = VectorI (for (i <- x.range1) yield id3.classify (x(i))._1)
    println (s"yp = $yp")

    val cm = new ConfusionMat (y, yp)
    println ("Confusion Matrix = " + cm.confusion)
    println ("accuracy = " + cm.accuracy)
    println ("prec-recall = " + cm.prec_recl)
    
    banner ("Prune the Tree")
    val threshold = 0.98
    id3.prune (threshold)
   
    val z = VectorI (2, 2, 1, 1)                                  // new data vector to classify
    println ("classify (" + z + ") = " + id3.classify (z))

} // DecisionTreeID3Test object


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `DecisionTreeID3Test2` object is used to test the `DecisionTreeID3` class.
 *  Ex: Classify (No/Yes) whether a there is breast cancer.
 *  > runMain scalation.analytics.classifier.DecisionTreeID3Test2
 */
object DecisionTreeID3Test2 extends App
{
    val fname   = BASE_DIR + "breast_cancer.csv"
    val dataset = MatrixI (fname)
    val cn = Array ("benign", "malignant")
    val fn = Array ("Clump Thickness", "Uniformity of Cell Size", "Uniformity of Cell Shape", "Marginal Adhesion",
                    "Single Epithelial Cell Size", "Bare Nuclei", "Bland Chromatin", "Normal Nucleoli", "Mitoses")
    val x  = dataset.sliceCol (0, dataset.dim2 - 1)
    val y  = dataset.col (dataset.dim2 - 1)
    val vc = (for (j <- x.range2) yield x.col(j).max () + 1).toArray
    val k  = cn.size

    banner ("Create and Train the DecisionTreeID3 Classifier")
    val id3 = new DecisionTreeID3 (x, y, fn, k, cn, vc, 2)        // create the classifier            
    id3.train ()

    banner ("Prune the Tree")
    val threshold = 0.4
    id3.prune (threshold)

} // DecisionTreeID3Test2 object

