
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  Matthew Saltz, John Miller
 *  @version 1.1
 *  @date    Thu Jul 25 11:28:31 EDT 2013
 *  @see     LICENSE (MIT style license file).
 */

package scalation.graphalytics

import collection.mutable.{ArrayBuffer, Map, Set}
import util.control.Breaks.{break, breakable}

import scalation.util.Timer.time

import Graph_EType.AList

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `GraphSim_E` class provides a second implementation for Simple Graph
 *  Simulation.  It differ from GraphSim in the looping order in the main for-loop
 *  and early termination when phi(u) is empty.
 *  @param g  the data graph  G(V, E, l)
 *  @param q  the query graph Q(U, D, k)
 */
class GraphSim_E (g: Graph_E, q: Graph_E)
      extends PatternMatcher2 (g, q)
{
    private val DEBUG = true                     // debug flag

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Apply the Graph Simulation pattern matching algorithm to find the mappings
     *  from the query graph 'q' to the data graph 'g'.  These are represented by a
     *  multi-valued function 'phi' that maps each query graph vertex 'u' to a
     *  set of data graph vertices '{v}'.
     */
    def mappings (): Array [AList] = saltzGraphSim (feasibleMates ())

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Graph Simulation by itself can not produce bijections.
     */
    def bijections (): collection.immutable.Set [Array [Int]] =
    {
        throw new UnsupportedOperationException ()
    } // bijections

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Given the mappings 'phi' produced by the 'feasibleMates' method,
     *  eliminate mappings 'u -> v' when v's children fail to match u's.
     *  @param phi  array of mappings from a query vertex u to { graph vertices v }
     */
    def saltzGraphSim (phi: Array [AList]): Array [AList] =
    {
        var alter = true
        while (alter) {                                                    // check for matching children
            if (DEBUG) showMappings (phi)
            alter = false

            // loop over query vertices u, u's children u_c, and data vertices v in phi(u)

            for (u <- qRange; u_c <- q.adj(u)) {
                var vr = -1                                                // vertex to be removed
                val elab_u2u_c = q.elabel ((u, u_c))                       // label in q for (u, u_c)
                breakable { for (v <- phi(u)) {
                    println ("g.adj(" + v + ") = " + g.adj(v))
                    println ("phi(" + u_c + ") = " + phi(u_c))
                    println ("intersect = " + (g.adj(v) intersect phi(u_c)))
                    val v_c = g.adj(v).filter (g.elabel (v, _) == elab_u2u_c)
                    if ((v_c intersect phi(u_c)).isEmpty) {                 // v must have a child in phi(u_c)
                        vr = v                                             // vertex to be removed
                        alter = true
                        break
                    } // if
                }} // for
                println ("befor phi = " + phi.deep)
                if (vr >= 0) phi(u) -= vr                                  // remove vertex vr
                println ("after phi = " + phi.deep)
                if (phi(u).isEmpty) return phi                            // no match for vertex u => no overall match
            } // for

        } // while
        phi
    } // saltzGraphSim

} // GraphSim_E class


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `GraphSim_ETest` object is used to test the `GraphSim_E` class.
 */
object GraphSim_ETest extends App
{
    val gSize     = 1000         // size of the data graph
    val qSize     =   10         // size of the query graph
    val nLabels   =  100         // number of distinct labels
    val gAvDegree =    5         // average vertex out degree for data graph
    val qAvDegree =    2         // average vertex out degree for query graph

    val g = GraphGenerator2.genRandomGraph (gSize, nLabels, gAvDegree)
    val q = GraphGenerator2.genBFSQuery (qSize, qAvDegree, g)

    val matcher = new GraphSim_E (g, q)                    // Graph Simulation Pattern Matcher
    val phi     = time { matcher.mappings () }             // time the matcher
    matcher.showMappings (phi)                             // display results

} // GraphSim_ETest object


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `GraphSim_ETest2` object is used to test the `GraphSim_E` class.
 */
object GraphSim_ETest2 extends App
{
    val q = Graph_E (Array (ArrayBuffer (1),
                            ArrayBuffer (0)),
                     Array (0, 1))

    val g = Graph_E (Array (ArrayBuffer (1),
                            ArrayBuffer (0),
                            ArrayBuffer (0),
                            ArrayBuffer (2)),
                     Array (0, 1, 1, 0))

    q.print ("q")
    g.print ("g")

    val matcher = new GraphSim_E (g, q)                    // Graph Simulation Pattern Matcher
    val phi     = time { matcher.mappings () }             // time the matcher
    matcher.showMappings (phi)                             // display results

} // GraphSim_ETest2 object


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `GraphSim_ETest3` object is used to test the `GraphSim_E` class.
 */
object GraphSim_ETest3 extends App
{
    val q = Graph_E (Array (ArrayBuffer (1, 2),
                            ArrayBuffer (2),
                            ArrayBuffer (3),
                            ArrayBuffer ()),
                     Array (1, 2, 1, 1),
                     Map ((0, 1) -> 1,
                          (0, 2) -> 3,
                          (1, 2) -> 2,
                          (2, 3) -> 3))    

    val g = Graph_E (Array (ArrayBuffer (1, 2),
                            ArrayBuffer (2, 3),
                            ArrayBuffer (3),
                            ArrayBuffer (4),
                            ArrayBuffer ()),
                     Array (2, 1, 2, 1, 1),
                     Map ((0, 1) -> 3,
                          (0, 2) -> 2,
                          (1, 2) -> 1,
                          (1, 3) -> 3,
                          (2, 3) -> 2,
                          (3, 4) -> 3))

    q.print ("q")
    g.print ("g")

    val matcher = new GraphSim_E (g, q)                    // Graph Simulation Pattern Matcher
    val phi     = time { matcher.mappings () }             // time the matcher
    matcher.showMappings (phi)                             // display results

} // GraphSim_ETest3 object

