
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 1.1
 *  @date    Mon May 19 15:52:24 EDT 2014
 *  @see     LICENSE (MIT style license file).
 *
 *  @see www.netlib.org/lapack/lawnspdf/lawn03.pdf
 *  @see www.netlib.org/lapack/lawns/lawn11.ps
 *  @see fortranwiki.org/fortran/show/svd
 *  @see www.math.pitt.edu/~sussmanm//2071Spring08/lab09/index.html
 */

package scalation.linalgebra

import math.{abs, max, min, sqrt}
import util.control.Breaks.{break, breakable}

import scalation.linalgebra.Rotation._
import scalation.math.Basic.sign
import scalation.math.ExtremeD.{EPSILON, MIN_NORMAL}

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `SVD` class is used to solve Singular Value Decomposition for bidiagonal matrices.
 *
 *  It computes the singular values and, optionally, the right and/or left singular vectors
 *  from the singular value decomposition (SVD) of a real n-by-n (upper) bidiagonal matrix B
 *  using the implicit zero-shift QR algorithm.  The SVD of B has the form
 *
 *     B = Q * S * P.t
 *
 *  where S is the diagonal matrix of singular values, Q is an orthogonal matrix of
 *  left singular vectors, and P is an orthogonal matrix of right singular vectors.
 *  If left singular vectors are requested, this subroutine actually returns U*Q
 *  instead of Q, and, if right singular vectors are requested, this subroutine
 *  returns P.t * VT instead of P.T, for given real input matrices U and VT.  When
 *  U and VT are the orthogonal matrices that reduce a general matrix A to bidiagonal
 *  form:  A = U*B*VT, as computed by  >= RD, then
 *
 *     A = (U*Q) * S * (P.t*VT)
 *
 *  is the SVD of A.
 *
 *  @see "Computing Small Singular Values of Bidiagonal Matrices With Guaranteed High Relative Accuracy,"
 *  J. Demmel and W. Kahan, LAPACK Working Note #3 (or SIAM J. Sci. Statist. Comput. 11:5, pp. 873-912, Sept 1990)
 *
 *  @see "Accurate singular values and differential qd algorithms," B. Parlett and V. Fernando,
 *  Technical Report CPAM-554, Mathematics Department, University of California at Berkeley, July 1992
 *
 *  @see LAPACK SUBROUTINE DBDSQR (UPLO, N, NCVT, NRU, NCC, D, E, VT, LDVT, U, LDU, C, LDC, WORK, INFO)
 *  @see fortranwiki.org/fortran/show/svd
 *
 *  @param a     the biagonal matrix A consisting of a diagonal and superdiagonal
 *  @param ncvt  the number of columns of the matrix VT
 *  @param nru   the number of rows of the matrix U
 */
class SVD (a: BidMatrixD, ncvt: Int = 0, nru: Int = 0)
{
    private val DEBUG  = true              // debug flag
    private val MAXITR = 6                 // interation fatcor
    private val n      = a.dim1            // the size of the bidiagoanl matrix
    private val work   = Array.ofDim [Double] (4 * n)      // workspace -- FIX: replace
    private val NM1    = n - 1             // one less than n
    private val NM12   = NM1 + NM1         // 2 * NM1
    private val NM13   = NM12 + NM1        // 3 * NM1
    private val maxit  = MAXITR * n * n    // maximum number of iterations allowed
    private val d      = a.dg              // the diagoanl
    private val e      = a.sd              // the superdiagoanl
    private val tol    = 100.0 * EPSILON   // tolerance, relative accurracy; set negaive for absolute

    private var oldll  = -1                // old saved lower index
    private var oldm   = -1                // old saved upper index
    private var m      = n-1               // m points to last element of unconverged part of matrix
    private var idir   = 0                 // the bulge chasing direction

    private var smin   = 0.0               // estimate for smallest singular value
    private var smax   = d.mag max e.mag   // estimate for largest singular value
    private var smin_l = 0.0               // ??

    private var cs     = 1.0               // cosine in rotation matrix
    private var sn     = 0.0               // sine in rotation matrix
    private var r      = 1.0               // remaining nonzero value
    private var oldcs  = 1.0               // old saved cosine in rotation matrix
    private var oldsn  = 0.0               // old saved sine in rotation matrix

    private var sigmn  = 0.0               // minimum singular value
    private var sigmx  = 0.0               // maximum singular value
    private var sinr   = 0.0               // sine right
    private var cosr   = 1.0               // cosine right
    private var sinl   = 0.0               // sine left
    private var cosl   = 1.0               // cosine right

    private val thresh = calcThreshold ()  // threshold for setting values to zero

    def max3 (x: Double, y: Double, z: Double) = (x max y) max z

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Calculate the desired threshold for setting elements to zero.
     */
    def calcThreshold (): Double =
    {
         if (tol >= 0.0) {                                       // relative accuracy desired
             var smin_oa = abs (d(0))
             if (smin_oa > 0.0) {
                 var mu = smin_oa
                 breakable { for (i <- 1 until n) {
                     mu = abs (d(i)) * (mu / (mu + abs(e(i-1))))
                     smin_oa = min (smin_oa, mu)
                     if (smin_oa == 0.0) break
                 }} // breakable for
             } // if
             smin_oa = smin_oa / sqrt (n.toDouble)
             return max (tol * smin_oa, MAXITR * n * n * MIN_NORMAL)
         } // if
         max (abs (tol) * smax, MAXITR * n * n * MIN_NORMAL)      // absolute accuracy desired
    } // calcThreshold
 
    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Deflate the bidiagonal matrix by iteratively turning superdiagonal elements
     *  to zero, return the vector of singular values (i.e., the main diagonal).
     */
    def deflate (): VectorD =
    {
        var go   = true            // go flag, continue deflation
        var iter = 0               // cumulative iterations of inner loop
        var idir = 0               // bulge (nonzero e-values) chasing direction

        do {                                           // begin main iteration loop

            // find block (ll, m) to work on 
            val ll = findBlock ()                      // e(ll) through e(m-1) are nonzero, e(ll-1) is zero

            if (DEBUG) {
                println ("iter          = " + iter)
                println ("diagonal d    = " + d)
                println ("sup-diag e    = " + e)
                println ("block (ll, m) = " + (ll, m))
                println ("-------------------------------------------")
            } // if

            if (ll == m) {                             // block is 1-by-1, done
//              go = false
            } else if (ll == m-1) {                    // block is 2-by-2, handle as a special case
                deflate_2by2 (ll)                   
//              go = false
            } else {                                   // block >= 3-by-3
                chooseDirection (ll)                   // choose bulge chasing direction
                if (idir == 1) convergeForward (ll)    // apply convergence tests (set almost zero to zero)
                else           convergeBackward (ll)
                oldll = ll                             // save ll and m
                oldm  = m
                val shift = computeShift (ll)          // compute amount of shift
                take_QRstep (ll, shift, idir)          // take one QR step (use rotation to clear an e-value)
                iter += m - ll                         // increment iteration count
            } // if

            if (m == 0) go = false                     // upper index m is at lower limit

        } while (go && iter < maxit)

        if (go) {                                      // loop exited due to iteratioon limit
            val nz = countNonzeroElements ()
            if (nz > 0) {
                println ("deflate: failed to converge - " + nz + " nonzero elements in superdiagonal")
                return null
            } // if
        } // if

        if (DEBUG) { 
            println ("diagonal d    = " + d)
            println ("sup-diag e    = " + e)
        } // if
   
        makePositive ()       // make singular values positive
        sortValues ()         // sort singular values into decreasing order
        d                     // return the singular values
    } // deflate

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Deflate 2 by 2 block, handle separately.
     *  @param ll  the lower index
     */
    def deflate_2by2 (ll: Int)
    {
        val svd2 = new SVD_2by2 (d(m-1), e(m-1), d(m))
        val d1   = svd2.deflateV2 ()
        sigmn = d1._1; sigmx = d1._2; sinr = d1._3; cosr = d1._4; sinl = d1._5; cosl = d1._6 
//      CALL DLASV2 (d(m-1), e(m-1), d(m), sigmn, sigmx, sinr, cosr, sinl, cosl)
        d(m-1) = sigmx
        e(m-1) = 0.0
        d(m)   = sigmn

//      Compute singular vectors, if desired

//      if (ncvt > 0) CALL DROT (ncvt, vt(m-1, 1), ldvt, vt(m, 1), ldvt, cosr, sinr)
//      if (nru > 0)  CALL DROT (nru,  u(1, m-1),  1,    u(1, m) , 1,    cosl, sinl)

        m -= 2
    } // deflate_2by2 

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Count the number of nonzero elemennts in the superdiagonal. Call if the
     *  maximum number of iterations exceeded, failure to converge
     */
    def countNonzeroElements (): Int =
    {
         var nzero = 0
         for (i <- 0 until n-1 if e(i) != 0.0) nzero += 1
         if (nzero > 0) println ("deflate failed: nzero = " + nzero)
         nzero
    } // countNonzeroElements

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Find diagonal block (ll, m) of matrix to work on, returning the lower
     *  index ll.  Also decrements upper index m, if needed. e(j) must be zero
     *  before and after the block.
     */
    private def findBlock (): Int =
    {
        var ll = 0                          // lower index of block
        if (tol < 0.0 && abs (d(m)) <= thresh) d(m) = 0.0
        smax = abs (d(m))
        smin = smax
        for (i <- 1 to m-1) {
            ll = m - i
            val abs_d = abs (d(ll))
            val abs_e = abs (e(ll))
            if (tol < 0.0 && abs_d <= thresh) d(ll) = 0.0
            if (abs_e <= thresh) {
                e(ll) = 0.0                 // matrix splits since e(ll) = 0
                if (ll == m-1) m -= 1       // down to a 1-by-1 block
                return ll                   // return immediately
            } // if
            smin = min (smin, abs_d)
            smax = max3 (smax, abs_d, abs_e)
        } // for
        ll                                  // return the lower index ll
    } // findBlock

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Working on new submatrix, choose shift direction
     *  (from larger end diagonal element towards smaller).
     *  @param ll  the lower index
     */
    private def chooseDirection (ll: Int)
    {
        if (ll > oldm || m < oldll) {
            if (abs (d(ll) ) >= abs (d(m))) {
                idir = 1     // chase bulge from top (big end) to bottom (small end)
            } else {
                idir = 2     // chase bulge from bottom (big end) to top (small end)
            } // if
        } // if
    } // chooseDirection

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Run convergence test in forward direction.  First apply standard test to
     *  bottom of matrix
     *  @param ll  the lower index
     */
    private def convergeForward (ll: Int)
    {
        if (abs (e(m-1)) <= abs (tol) * abs (d(m)) || (tol < 0.0  && abs (e(m-1)) <= thresh)) {
           e(m-1) = 0.0
           return
        } // if

        if (tol >= 0.0 ) {    // if relative accuracy desired,  apply convergence criterion forward
            var mu = abs (d(ll))
            smin_l = mu
            for (i <- ll to m-1) {
                if (abs (e(i)) <= tol * mu) {
                    e(i) = 0.0
                    return
                } // if
                mu     = abs (d(i+1)) * (mu / (mu + abs (e(i))))
                smin_l = min (smin_l, mu)
            } // for
        } // if
    } // convergeForward

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Run convergence test in backward direction.  First apply standard test to
     *  top of matrix.
     *  @param ll  the lower index
     */
    private def convergeBackward (ll: Int)
    {
        if (abs (e(ll)) <= abs (tol) * abs (d(ll)) || (tol < 0.0 && abs (e(ll)) <= thresh)) {
            e(ll) = 0.0
            return
        } // if

        if (tol >= 0.0) {  // if relative accuracy desired, apply convergence criterion backward
            var mu = abs (d(m))
            smin_l = mu
            for (i <- m-1 to ll by -1) {
               if (abs (e(i)) <= tol * mu) {
                  e(i) = 0.0
                  return
               } // if
               mu     = abs (d(i)) * (mu / (mu + abs (e(i))))
               smin_l = min (smin_l, mu)
           } // for
       } // if
    } // convergeForward

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compute shift by first, test if shifting would ruin relative accuracy,
     *  and if so set the shift to zero.
     *  @param ll  the lower index
     */
    private def computeShift (ll: Int): Double =
    {
        var shft = 0.0
        var sll  = 0.0
        if (tol >= 0.0 && n * tol * (smin_l / smax ) <= max (EPSILON, 0.01 * tol)) {
            return shft             // use a zero shift to avoid loss of relative accuracy
        } // if

//      Compute the shift from 2-by-2 block at end of matrix

        if (idir == 1) {
            sll = abs (d(ll))
            val svd2 = new SVD_2by2 (d(m-1), e(m-1), d(m))
            val d1   = svd2.deflate2 (); shft = d1._1; r = d1._2
//          CALL DLAS2 (d(m-1), e(m-1), d(m), shift, r)
        } else {
            sll = abs (d(m))
            val svd2 = new SVD_2by2 (d(ll), e(ll), d(ll+1))
            val d1   = svd2.deflate2 (); shft = d1._1; r = d1._2
//          CALL DLAS2 (d(ll), e(ll), d(ll+1), shift, r)
        } // if

//      Test if shift negligible, and if so set to zero

        if (sll > 0.0 && shft*shft / sll*sll < EPSILON) shft = 0.0
        shft
    } // computeShift

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Take one QR step to push a super-diagonal element toward zero.
     *  @param ll     the lower index
     *  @param shift  the amount of shift
     *  @param idir   the direction, t2b or b2t
     */
    private def take_QRstep (ll: Int, shift: Double, idir: Int)
    {
             if (shift == 0.0) {
                 if (idir == 1) {
                     zeroShiftQR_t2b (ll)
                 } else {
                     zeroShiftQR_b2t (ll)
                 } // if
             } else {
                 if (idir == 1) {
                     shiftedQR_t2b (ll, shift)
                 } else {
                     shiftedQR_b2t (ll, shift)
                 } // if
             } // if
    } // take_QRstep

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Chase bulge from top to bottom.  Save cosines and sines for later singular
     *  vector updates.
     *  @param ll  the lower index
     */
    private def zeroShiftQR_t2b (ll: Int)
    {
        cs    = 1.0
        oldcs = 1.0
        for (i <- ll to m-1) {
            val q1 = rotate (d(i) * cs, e(i)); cs = q1.cs; sn = q1.sn; r = q1.r
//          CALL DLARTG (d(i) * cs, e(i), cs, sn, r)
            if (i > ll) e(i-1) = oldsn * r
            val q2 = rotate (oldcs * r, d(i+1) * sn); oldcs = q2.cs; oldsn = q2.sn; d(i) = q2.r
//          CALL DLARTG (oldcs * r, d(i+1) * sn, oldcs, oldsn, d(i))
            work(i-ll+1)      = cs
            work(i-ll+1+NM1)  = sn
            work(i-ll+1+NM12) = oldcs
            work(i-ll+1+NM13) = oldsn
        } // for
        val h  = d(m) * cs
        d(m)   = h * oldcs
        e(m-1) = h * oldsn

        if (abs (e(m-1)) <= thresh) e(m-1) = 0.0      // test convergence

//      Update singular vectors, if desired

//      if (ncvt > 0) CALL DLASR ('l', 'v', 'f', m-ll+1, ncvt, work(1),  work(n), vt(ll, 1), ldvt)
//      if (nru > 0)  CALL DLASR ('r', 'v', 'f', nru, m-ll+1, work(NM12+1), work(NM13+1), u(1, ll), ldu)
     } // zeroShiftQR_t2b

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Chase bulge from bottom to top.  Save cosines and sines for later singular
     *  vector updates.
     *  @param ll  the lower index
     */
    private def zeroShiftQR_b2t (ll: Int)
    {
        cs    = 1.0
        oldcs = 1.0
        for (i <- m to ll+1 by -1) {
            val q1 = rotate (d(i) * cs, e(i-1)); cs = q1.cs; sn = q1.sn; r = q1.r
//          CALL DLARTG (d(i) * cs, e(i-1), cs, sn, r)
            if( i < m ) e(i) = oldsn * r
            val q2 = rotate (oldcs * r, d(i-1) * sn); oldcs = q2.cs; oldsn = q2.sn; d(i) = q2.r
//          CALL DLARTG (oldcs * r, d(i-1) * sn, oldcs, oldsn, d(i))
            work(i-ll)      = cs
            work(i-ll+NM1)  = -sn
            work(i-ll+NM12) = oldcs
            work(i-ll+NM13) = -oldsn
        } // for
        val h = d(ll) * cs
        d(ll) = h * oldcs
        e(ll) = h * oldsn

        if (abs (e(ll)) <= thresh) e(ll) = 0.0     // test convergence

//      Update singular vectors, if desired

//      if (ncvt > 0) CALL DLASR ('l', 'v', 'b', m-ll+1, ncvt, work(NM12+1), work(NM13+1), vt(ll, 1), ldvt)
//      if (nru > 0)  CALL DLASR ('r', 'v', 'b', nru, m-ll+1, work(1),  work(n), u(1, ll), ldu)
    } // zeroShiftQR_b2t

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Using nonzero shift, chase bulge from top to bottom.  Save cosines and
     *  sines for later singular vector updates
     *  @param ll     the lower index
     *  @param shift  the amount of shift
     */
    private def shiftedQR_t2b (ll: Int, shift: Double)
    {
        var f = (abs (d(ll)) - shift) * (sign (1.0, d(ll)) + shift / d(ll))
        var g = e(ll)
        for (i <- ll to m-1) {
            val q1 = rotate (f, g); cosr = q1.cs; sinr = q1.sn; r = q1.r
//          CALL DLARTG (f, g, cosr, sinr, r)
            if (i > ll) e(i-1) = r
            f      = cosr * d(i) + sinr * e(i)
            e(i)   = cosr * e(i) - sinr * d(i)
            g      = sinr * d(i+1)
            d(i+1) = cosr * d(i+1)
            val q2 = rotate (f, g); cosl = q2.cs; sinl = q2.sn; r = q2.r
//          CALL DLARTG (f, g, cosl, sinl, r)
            d(i)   = r
            f      = cosl * e(i)   + sinl * d(i+1)
            d(i+1) = cosl * d(i+1) - sinl * e(i)
            if (i < m-1) {
                g      = sinl * e(i+1)
                e(i+1) = cosl * e(i+1)
            } // if
            work(i-ll+1)      = cosr
            work(i-ll+1+NM1)  = sinr
            work(i-ll+1+NM12) = cosl
            work(i-ll+1+NM13) = sinl
      } // for
      e(m-1) = f

      if (abs (e( m-1)) <= thresh ) e(m-1) = 0.0          //  test convergence

//    Update singular vectors, if desired

//    if (ncvt > 0) CALL DLASR ('l', 'v', 'f', m-ll+1, ncvt, work(1), work(n), vt(ll, 1), ldvt)
//    if (nru > 0)  CALL DLASR ('r', 'v', 'f', nru, m-ll+1, work(NM12+1), work(NM13+1), u(1, ll), ldu)
    } // shiftedQR_t2b

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Using nonzero shift, chase bulge from bottom to top.  Save cosines and
     *  sines for later singular vector updates
     *  @param ll     the lower index
     *  @param shift  the amount of shift
     */
    private def shiftedQR_b2t (ll: Int, shift: Double)
    {
        var f = (abs (d(m)) - shift) * (sign(1.0, d(m)) + shift / d(m))
        var g = e(m-1)
        for (i <- m to ll+1 by -1) {
            val q1 = rotate (f, g); cosr = q1.cs; sinr = q1.sn; r = q1.r
//          CALL DLARTG (f, g, cosr, sinr, r)
            if (i < m) e(i) = r
            f      = cosr * d(i)   + sinr * e(i-1)
            e(i-1) = cosr * e(i-1) - sinr * d(i)
            g      = sinr * d(i-1)
            d(i-1) = cosr * d(i-1)
            val q2 = rotate (f, g); cosl = q2.cs; sinl = q2.sn; r = q2.r
//          CALL DLARTG (F, G, COSL, SINL, R)
            d(i)   = r
            f      = cosl * e(i-1) + sinl * d(i-1)
            d(i-1) = cosl * d(i-1) - sinl * e(i-1)
            if (i > ll+1) {
                g      = sinl * e(i-2)
                e(i-2) = cosl * e(i-2)
            } // if
            work(i-ll)      = cosr
            work(i-ll+NM1)  = -sinr
            work(i-ll+NM12) = cosl
            work(i-ll+NM13) = -sinl
        } // for
        e(ll) = f

        if (abs (e(ll)) <= thresh) e(ll) = 0.0     // test convergence

//      Update singular vectors if desired, if desired

//      if (ncvt > 0) CALL DLASR ('l', 'v', 'b', m-ll+1, ncvt, work(NM12+1), work(NM13+1), vt(ll, 1), ldvt)
//      if (nru > 0)  CALL DLASR ('r', 'v', 'b', nru, m-ll+1, work(1), work(n), u(1, ll), ldu)
    } // shiftedQR_b2t

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** All singular values converged, so make them positive.
     */
    private def makePositive ()
    {
        for (i <- 0 until n) {
            if (d(i) < 0.0) {
                d(i) = -d(i)

//              Change sign of singular vectors, if desired
//              if (ncvt > 0) CALL DSCAL (ncvt, -1.0, vt(i, 1), ldvt)
            }  // if
        } // for
    } // makePositive

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Sort the singular values into decreasing order (insertion sort on singular
     *  values, but only one transposition per singular vector).
     */
    private def sortValues ()
    {
        d.sort2 ()    // sort vector d in descending order
/*
        for (i <- 0 until n-1) {        // scan for smallest d(i)
            var isub = 0
            smin     = d(0)
            for (j <- 1 until n-i) {
                 if (d(j) <= smin) {
                     isub = j
                     smin = d(j)
                 } // if
             } // for

             if (isub != n-i) {         // swap singular values and vectors
                 d(isub) = d(n-i)
                 d(n-i)  = smin
//               if (ncvt > 0) CALL DSWAP (ncvt, vt(isub, 1), ldvt, vt(n+1-i, 1), ldvt)
//               if (nru > 0)  CALL DSWAP (nru, u(1, isub), 1, u(1, n+1-i), 1)
             } // if
        } // for
*/
    } // sortValues

 } // SVD class 


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `SVDTest` is used to test the `SVD` class.
 *  Answer: singular values = (2.28825, 0.87403)  
 *  @see http://comnuan.com/cmnn01004/
 */
object SVDTest extends App
{
    val a = new MatrixD ((2, 2), 1.0, 1.0,
                                 0.0, 2.0)
    val b = new BidMatrixD (a)

    val svd = new SVD (b)

    println ("----------------------------------------")
    println ("Test SVD")
    println ("----------------------------------------")
    println ("a = " + a)
    println ("b = " + b)
    println ("----------------------------------------")
    println ("singular values  = " + svd.deflate ())
//  println ("----------------------------------------")
//  println ("singular val/vec = " + svd.deflateV ())

} // SVDTest 


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `SVDTest2` is used to test the `SVD` class.
 *  Answer: singular values = (3.82983, 1.91368, 0.81866)
 */
object SVDTest2 extends App
{
    val a = new MatrixD ((3, 3), 1.0, 1.0, 0.0,
                                 0.0, 2.0, 2.0,
                                 0.0, 0.0, 3.0)
    val b = new BidMatrixD (a)

    val svd = new SVD (b)

    println ("----------------------------------------")
    println ("Test SVD")
    println ("----------------------------------------")
    println ("a = " + a)
    println ("b = " + b)
    println ("----------------------------------------")
    println ("singular values  = " + svd.deflate ())
//  println ("----------------------------------------")
//  println ("singular val/vec = " + svd.deflateV ())

} // SVDTest2

