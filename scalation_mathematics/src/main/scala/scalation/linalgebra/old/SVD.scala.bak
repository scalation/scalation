
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 1.1
 *  @date    Mon May 19 15:52:24 EDT 2014
 *  @see     LICENSE (MIT style license file).
 *
 *  @see www.netlib.org/lapack/lawnspdf/lawn03.pdf
 *  @see www.netlib.org/lapack/lawns/lawn11.ps
 *  @see fortranwiki.org/fortran/show/svd
 *  @see www.math.pitt.edu/~sussmanm//2071Spring08/lab09/index.html
 */

package scalation.linalgebra

import math.{abs, sqrt}

import scalation.math.Basic.sign

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `SVD` is used to solve Singular Value Decomposition for bidiagonal matrices.
 *  @see fortranwiki.org/fortran/show/svd
 */
class SVD_2by2 (a: BidMatrix)
{
    private val EPS   = 1E-16         // machine epsilon
    private var ssMin = 0.0           // smallest singular values
    private var ssMax = 0.0           // largest singular value
    private var left  = (0.0, 0.0)    // left singular vector
    private var right = (0.0, 0.0)    // right singular vector
    private var lt    = (0.0, 0.0)    // temp left singular vector
    private var rt    = (0.0, 0.0)    // temp right singular vector

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the two singular values (smallest first) for the bidiagonal 2-by-2
     *  matrix form from the elements f, g and h.
     */
    def deflate (): Tuple2 [Double, Double] =
    {
        var ft  = f
        var fa  = abs (ft)
        var ht  = h
        var ha  = abs (h)
        var gt  = g
        var ga  = abs (gt)
        var tmp = 0.0

//      pmax points to the maximum absolute element of matrix
//          pmax = 1 if F largest in absolute values
//          pmax = 2 if G largest in absolute values
//          pmax = 3 if H largest in absolute values

        var pmax = 1
        val swap = ha > fa 
        if (swap) {
            pmax = 3
            tmp = ft; ft = ht; ht = tmp         // swap ft and ht
            tmp = fa; fa = ha; ha = tmp         // swap fa and ha, now fa >= ha
        } // if

        if (ga == 0.0) return (ha, fa)            // it's already a diagonal matrix

        var gaSmal = true

        if (ga > fa) {
            pmax = 2
            if (fa / ga < EPS) {                  // case of very large GA
                gaSmal = false
                ssMax  = ga
                ssMin  = if (ha > 1.0) fa / ( ga / ha ) else (fa / ga ) * ha
                lt     = (1.0, ht / gt)
                rt     = (1.0, ft / gt)
            } // if
        } // if

        if (gaSmal) {                             // normal case
            val d = fa - ha
            var l = if (d == fa) 1.0 else d / fa     // copes with infinite f or h (note: 0 <= L <= 1)
            val m = gt / ft                          // note: abs (m) <= 1/macheps
            var t = 2.0 - l                          // note: t >= 1
            val mm = m * m
            val tt = t * t
            val s = sqrt (tt + mm)                   // note: 1 <= s <= 1 + 1/macheps
            val r = if (l == 0.0) abs (m ) else sqrt (l * l + mm )  // note: 0 <= r <= 1 + 1/macheps
            val a = 0.5 * (s+r)                      // note: 1 <= a <= 1 + abs (m)

            ssMin = ha / a                           // initial values for signular values
            ssMax = fa * a

            if (mm == 0.0) {                     // note: m is very tiny
                t = if (l == 0.0) sign (2.0, ft) * sign (1.0, gt)
                    else gt / sign (d, ft) + m / t
            } else {
                 t = (m / (s + t) + m / (r + l)) * (1.0 + a)
            } // if
            l  = sqrt (t*t + 4.0)

            rt = (2.0 / l, t / l)                     // initial values for signular vectors
            lt = ((rt._1 + rt._2 * m) / a, (ht / ft) * rt._2 / a)
        } // if

        if (swap) {
            left  = (rt._2, rt._1)
            right = (lt._2, lt._1)
        } else {
            left  = lt
            right = rt
        } // if

        correctSigns (pmax)         // return singular values
    } // deflate

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the left and right singular vectors.
     */
    def getVectors (): Tuple2 [Tuple2 [Double, Double], Tuple2 [Double, Double]] =
    {
        (left, right)
    } // getVectors

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Correct signs of singular values ssMin and ssMax.
     *  @param pmax
     */
    private def correctSigns (pmax: Int): Tuple2 [Double, Double] =
    {
        val tsign = pmax match {
             case 1 => sign (1.0, right._1) * sign (1.0, left._1) * sign (1.0, f)
             case 2 => sign (1.0, right._2) * sign (1.0, left._1) * sign (1.0, g)
             case 3 => sign (1.0, right._2) * sign (1.0, left._2) * sign (1.0, h)
        } // match
        (sign (ssMin, tsign * sign (1.0, f) * sign (1.0, h)), sign (ssMax, tsign))
    } // correctSigns

} // SVD_2by2 class


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `SVD_2by2Test` is used to test the `SVD_2by2` class.
 */
object SVD_2by2Test extends App
{
    import Eigen_2by2.eigenvalues

    val a = new MatrixD ((2, 2), 1.0, 1.0,
                                 0.0, 2.0)

    val svd = new SVD_2by2 (a(0, 0), a(0, 1), a(1, 1))

    println ("----------------------------------------")
    println ("Test SVD_2by2")
    println ("----------------------------------------")
    println ("a = " + a)
    println ("----------------------------------------")
    println ("singular values  = " + svd.deflate ())
    println ("singular vectors = " + svd.getVectors ())

    println ("----------------------------------------")
    println ("Compare to Eigen_2by2")
    println ("----------------------------------------")
    println ("eigenvalues  = " + eigenvalues (a.t * a).map (sqrt _))

} // SVD_2by2Test object

