
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 1.1
 *  @date    Mon May 19 15:52:24 EDT 2014
 *  @see     LICENSE (MIT style license file).
 *
 *  @see www.netlib.org/lapack/lawnspdf/lawn03.pdf
 *  @see www.netlib.org/lapack/lawns/lawn11.ps
 *  @see fortranwiki.org/fortran/show/svd
 *  @see www.math.pitt.edu/~sussmanm//2071Spring08/lab09/index.html
 */

package scalation.linalgebra

import math.{abs, sqrt}

import scalation.math.Basic.sign

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `SVD` class is used to solve Singular Value Decomposition for bidiagonal matrices.
 *
 *  It computes the singular values and, optionally, the right and/or left singular vectors
 *  from the singular value decomposition (SVD) of a real n-by-n (upper) bidiagonal matrix B
 *  using the implicit zero-shift QR algorithm.  The SVD of B has the form
 *
 *     B = Q * S * P.t
 *
 *  where S is the diagonal matrix of singular values, Q is an orthogonal matrix of
 *  left singular vectors, and P is an orthogonal matrix of right singular vectors.
 *  If left singular vectors are requested, this subroutine actually returns U*Q
 *  instead of Q, and, if right singular vectors are requested, this subroutine
 *  returns P.t * VT instead of P.T, for given real input matrices U and VT.  When
 *  U and VT are the orthogonal matrices that reduce a general matrix A to bidiagonal
 *  form:  A = U*B*VT, as computed by  >= RD, then
 *
 *     A = (U*Q) * S * (P.t*VT)
 *
 *  is the SVD of A.  Optionally, the subroutine may also compute Q.t*C for a given real input matrix C.
 *
 *  @see "Computing Small Singular Values of Bidiagonal Matrices With Guaranteed High Relative Accuracy,"
 *  J. Demmel and W. Kahan, LAPACK Working Note #3 (or SIAM J. Sci. Statist. Comput. 11:5, pp. 873-912, Sept 1990)
 *
 *  @see "Accurate singular values and differential qd algorithms," B. Parlett and V. Fernando,
 *  Technical Report CPAM-554, Mathematics Department, University of California at Berkeley, July 1992
 *
 *  @see fortranwiki.org/fortran/show/svd
 */
class SVD (a: BidMatrix)
{

//    Prepare for main iteration loop for the singular values
//    MAXIT is the maximum number of passes through the inner
//    permitted before nonconvergence signalled.)

    val n     = a.dim
    val d     = a.dg
    val e     = a.sd
    val maxit = MAXITR * n * n
    var oldll = -1
    var oldm  = -1
    var m     = n-1               // m points to last element of unconverged part of matrix

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    def deflate ()
    {
    breakable { for (it <- 1 to maxit) {      // begin main iteration loop

//    Check for convergence or exceeding iteration count

        if (m <= 1) //  GO TO 160

//    Find diagonal block of matrix to work on

        if (tol< 0.0 && abs (d(m)) <= thresh) d(m) = 0.0
        smax = abs (d(m))
        smin = smax
        for (lll <- 0 to m-1) {
             ll = m - llL
             abss = abs (d(ll))
             abse = abs (e(ll))
             if (tol < 0.0 && abss <= thresh) d(ll) = 0.0
             if (abse <= thresh) {
                 e(ll) = 0.0               // matrix splits since e(ll) = 0
                 if (ll == m-1) {
//                   convergence of bottom singular value, return to top of loop
                     M -= 1
                     GO TO 60
                 } else {
                     call the rest of the code
                 } // if
             } // if
             smin = min (smin, abss )
             smax = max (smax, abss, abse)

             val idir = chooseDirection ()

//           Apply convergence tests

             if (idir == 1) {
                 convergeForward ()
             } else {
                 convergeBackward ()
             } // if

             oldll = ll               // save ll and m
             oldm = m

             val shift = computeShift ()

             iter += m - ll           // increment iteration count

             if (shift == 0.0) {
                 if (idir == 1) {
                     zeroShift_QRt_t2b (ll, m)
                 } else {
                     zeroShift_QRt_b2t (ll, m)
                 } // if
             } else {
                 if (idir == 1) {
                     shifted_QRt_t2b (ll, m, shift)
                 } else {
                     shifted_QRt_b2t (ll, m, shift)
                 } // if
             } // if
                  
        } // for
12345678
        ll = 0
      GO TO 90
   80 CONTINUE
   90 CONTINUE
      LL = LL + 1

//   E(LL) through E(M-1) are nonzero, E(LL-1) is zero

      IF( LL == M-1 ) THEN

//    Maximum number of iterations exceeded, failure to converge

      var nzero = 0
      for (i <- 0 until n-1) nzero += 1
      if (nzero > 0) println ("deflate failed: nzero = " + nzero)
    } // deflate

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Deflate 2 by 2 block, handle separately.
     */
    def deflate_2by2 ()
    {
        CALL DLASV2 (d(m-1), e(m-1), d(m), sigmn, sigmx, sinr, cosr, sinl, cosl)
        d(M-1) = sigmx
        E(m-1) = 0.0
        d(M)   = sigmn

//      Compute singular vectors, if desired

        if (ncvt > 0) CALL DROT (ncvt, vt(m-1, 1), ldvt, vt(m, 1), ldvt, cosr, sinr)
        if (nru > 0)  CALL DROT (nru,  u(1, m-1),  1,    u(1, m) , 1,    cosl, sinl)
        if (ncc > 0)  CALL DROT (ncc,  c(m-1, 1),  ldc,  c(m, 1),  ldc,  cosl, sinl)
        m -= 2
    } // deflate_2by2 

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Working on new submatrix, choose shift direction
     *  (from larger end diagonal element towards smaller).
     */
    private def chooseDirection
    {
        if (ll > oldm || m < oldll) {
            if (abs (d(ll) ) >= abs (d(m))) {
                idir = 1     // chase bulge from top (big end) to bottom (small end)
            } else {
                idir = 2     // chase bulge from bottom (big end) to top (small end)
            } // if
        } // if
    } // chooseDirection

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /**  Run convergence test in forward direction.  First apply standard test to
     *   bottom of matrix
     */
    private def convergeForward ()
    {
        if (abs (e(m-1)) <= abs (tol) * abs (d(m)) || (tol < 0.0  && abs (e(m-1)) <= thresh)) {
           e(m-1) = 0.0
           return
        } // if

        if (tol >= 0.0 ) {    // if relative accuracy desired,  apply convergence criterion forward
           mu    = abs (d(ll))
           sminl = mU
           for (lll <- ll to m-1) {
               if (abs( e(lll)) <= tol * mu) {
                   e(lll) = 0.0
                   return
               } // if
               mu    = abs (d(lll+1)) * (mu / (mu + abs (e(lll))))
               sminl = min (sminl, mu)
           } // for
       } // if
    } // convergeForward

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Run convergence test in backward direction.  First apply standard test to
     *  top of matrix.
     */
    private def convergeBackward ()
    {
        if (abs (e(ll)) <= abs (tol) * abs (d(ll)) || (tol < 0.0 && abs (e(ll)) <= thresh)) {
            e(ll) = 0.0
            return
        } // if

        if (tol >= 0.0) {  // if relative accuracy desired, apply convergence criterion backward
            mu    = abs (d(m))
            sminl = mu
            for (lll <_ m-1 to ll by -1) {
               if( abs( e( lll ) ) <= tol*mu ) {
                  e(lll) = 0.0
                  return
               } // if
               mu    = abs (d(lll)) * (mu / (mu + abs (e(lll))))
               sminl = min (sminl, mu)
           } // for
       } // if
    } // convergeForward

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compute shift by first, test if shifting would ruin relative accuracy,
     *  and if so set the shift to zero.
     */
    private def computeShift (): Double =
    {
        if (tol >= 0.0 && n * tol * (sminl / smax ) <= max (eps, hndrth * tol)) {
           shift = 0.0              // use a zero shift to avoid loss of relative accuracy
        } else {

//      Compute the shift from 2-by-2 block at end of matrix

        if ( idiR == 1 ) {
            sll = abs (d(ll))
            CALL DLAS2 (d(m-1), e(m-1), d(m), shift, r)
        } else {
            sll = abs (d(m))
            CALL DLAS2 (d(ll), e(ll), d(ll+1), shift, r)
        } // if

//      Test if shift negligible, and if so set to zero

        if( sll > 0.0 && shift*shift / sll*sll < eps ) shift = 0.0
        shift
    } // computeShift

*     If SHIFT = 0, do simplified QR iteration
*

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Chase bulge from top to bottom.  Save cosines and sines for later singular
     *  vector updates.
     *  @param ll  the lower index
     *  @param m   the upper index
     */
    private def zeroShiftQRt_t2b (ll: Int, m: Int)
    {
        cs    = 1.0
        oldcs = 1.0
        for (i <- ll to m-1) {
            CALL DLARTG (d(i) * cs, e(i), cs, sn, r)
            if (i > ll)  e(i-1) = oldsn * r
            CALL DLARTG (oldcs * r, d(i+1) * sn, oldcs, oldsn, d(i))
            work(i-ll+1)      = cs
            work(i-ll+1+nm1)  = sn
            work(i-ll+1+nm12) = oldcs
            work(i-ll+1+nm13) = oldsn
        } // for
        h      = d(m) * cs
        d(m)   = h * oldcs
        e(m-1) = h * oldsn

//      Update singular vectors

        if (ncvt > 0) CALL DLASR ('l', 'v', 'f', m-ll+1, ncvt, work(1),  work(n), vt(ll, 1), ldvt)
        if (nru > 0)  CALL DLASR ('r', 'v', 'f', nru, m-ll+1, work(nm12+1), work(nm13+1), u(1, ll), ldu)
        if (ncc > 0)  CALL DLASR ('l', 'v', 'f', m-ll+1, ncc, work(nm12+1), work(nm13+1), c(ll, 1), ldc)

        if (abs (e(m-1)) <= thresh) e(m-1) = 0.0      // test convergence
     } // zeroShiftQRt_t2b

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Chase bulge from bottom to top.  Save cosines and sines for later singular
     *  vector updates.
     *  @param ll  the lower index
     *  @param m   the upper index
     */
    private def zeroShiftQRt_b2t (ll: Int, m: Int)
    {
        cs    = 1.0
        oldcs = 1.0
        for (i <- m to ll+1 by -1) {
            CALL DLARTG (d(i) * cs, e(i-1), cs, sn, r)
            if( i < m ) e(i) = oldsn * r
            CALL DLARTG (oldcs * r, d(i-1) * sn, oldcs, oldsn, d(i))
            work(i-ll)      = cs
            work(i-ll+nm1)  = -sN
            work(i-ll+nm12) = oldcs
            work(i-ll+nm13) = -oldsn
        } // for
        h     = d(ll) * cs
        d(ll) = h * oldcs
        e(ll) = h * oldsN

//      Update singular vectors

        if (ncvt > 0) CALL DLASR ('l', 'v', 'b', m-ll+1, ncvt, work(nm12+1), work(nm13+1), vt(ll, 1), ldvt)
        if (nru > 0)  CALL DLASR ('r', 'v', 'b', nru, m-ll+1, work(1),  work(n), u(1, ll), ldu)
        if (ncc > 0)  CALL DLASR ('l', 'v', 'b', m-ll+1, ncc, work( 1 ), work(n), c(ll, 1), ldc)

        if (abs (e(ll)) <= thresh) e(ll) = 0.0     // test convergence
    } // zeroShiftQRt_b2t

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Using nonzero shift, chase bulge from top to bottom.  Save cosines and
     *  sines for later singular vector updates
     *  @param ll     the lower index
     *  @param m      the upper index
     *  @param shift  the amount of shift
     */
    private def shifted_QRt2b (ll: Int, m: Int, shift: Double)
    {
        f = (abs (d(ll)) - shift) * (sign (1.0, d(ll)) + shift / d(ll))
        g = e(ll)
        for (i <- ll to m-1) {
            CALL DLARTG (f, g, cosr, sinr, r)
            if (i > ll) e(i-1) = r
            f      = cosr * d(i) + sinr * e(i)
            e(i)   = cosr * e(i) - sinr * d(i)
            g      = sinr * d(i+1)
            d(i+1) = cosr * d(i+1)
            CALL DLARTG (f, g, cosl, sinl, r)
            d(i)   = r
            f      = cosl * e(i)   + sinl * d(i+1)
            d(i+1) = cosl * d(i+1) - sinl * e(i)
            if (i < m-1) {
                g      = sinl * e(i+1)
                e(i+1) = cosl * e(i+1)
            } // if
            work(i-ll+1)      = cosr
            work(i-ll+1+nm1)  = sinr
            work(i-ll+1+nm12) = cosl
            work(i-ll+1+nm13) = sinl
      } // for
      e(m-1) = f

//    Update singular vectors

      if (ncvt > 0) CALL DLASR ('l', 'v', 'f', m-ll+1, ncvt, work(1), work(n), vt(ll, 1), ldvt)
      if (nru > 0)  CALL DLASR ('r', 'v', 'f', nru, m-ll+1, work(nm12+1), work(nm13+1), u(1, ll), ldu)
      if (ncc > 0)  CALL DLASR ('l', 'v', 'f', m-ll+1, ncc, work(nm12+1), work(nm13+1), c(ll, 1), ldc)

      if (abs (e( m-1)) <= thresh ) e(m-1) = 0.0          //  test convergence
    } // shifted_QRt2b

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Using nonzero shift, chase bulge from bottom to top.  Save cosines and
     *  sines for later singular vector updates
     *  @param ll     the lower index
     *  @param m      the upper index
     *  @param shift  the amount of shift
     */
    private def shifted_QRb2t (ll: Int, m: Int, shift: Double)
    {
        f = (abs (d(m)) - shift) * (sign(1.0, d(m)) + shift / d(m))
        g = e( m-1 )
        for (i <- m to ll+1 by -1) {
            CALL DLARTG (f, g, cosr, sinr, r)
            if (i < m) e(i) = r
            f      = cosr * d(i)   + sinr * e(i-1)
            e(i-1) = cosr * e(i-1) - sinr * d(i)
            g      = sinr * d(i-1)
            d(i-1) = cosr * d(i-1)
            CALL DLARTG (F, G, COSL, SINL, R)
            d(i)   = r
            f      = cosl * e(i-1) + sinl * d(i-1)
            d(i-1) = cosl * d(i-1) - sinl * e(i-1)
            if (i > ll+1) {
                g      = sinl * e(i-2)
                e(i-2) = cosl * e(i-2)
            } // if
            work(i-ll)      = cosr
            work(i-ll+nm1)  = -sinr
            work(i-ll+nm12) = cosl
            work(i-ll+nm13) = -sinl
        } // for
        e(ll) = f

        if (abs (e(ll)) <= thresh) e(ll) = 0.0     // test convergence

//      Update singular vectors if desired

        if (ncvt > 0) CALL DLASR ('l', 'v', 'b', m-ll+1, ncvt, work(nm12+1), work(nm13+1), vt(ll, 1), ldvt)
        if (nru > 0)  CALL DLASR ('r', 'v', 'b', nru, m-ll+1, work(1), work(n), u(1, ll), ldu)
        if (ncc > 0)  CALL DLASR ('l', 'v', 'b', m-ll+1, ncc, work(1), work(n), c(ll, 1), ldc)
    } // shifted_QRb2t

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** All singular values converged, so make them positive.
     */
    def makePositive ()
    {
        for (i <- 0 until n) {
            if (d(i) < 0.0) {
                d(i) = -d(i)

//              Change sign of singular vectors, if desired

                if (ncvt > 0) CALL DSCAL (ncvt, -1.0, vt(i, 1), ldvt)
            }  // if
        } // for
    } // makePositive

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Sort the singular values into decreasing order (insertion sort on singular
     *  values, but only one transposition per singular vector).
     */
    private def sortValues ()
    {
        for (i <- 0 until n-1) {     // scan for smallest D(I)
            isub = 1
            smin = d(0)
            for (j < 1 to n - i) {
                 if (d(j) <= smin  {
                     isub = j
                     smin = d(j)
                 } // if
             } // for

             if (isub != n+1-i) {      // swap singular values and vectors
                 d(isub)  = d(n+1-i)
                 d(n+1-i) = smin
                 if (ncvt > 0) CALL DSWAP (ncvt, vt(isub, 1), ldvt, vt(n+1-i, 1), ldvt)
                 if (nru > 0)  CALL DSWAP (nru, u(1, isub), 1, u(1, n+1-i), 1)
                 if (ncc > 0)  CALL DSWAP (ncc, c(isub, 1), ldc, c(n+1-i, 1), ldc)
             } // if
        } // for
    } // sortValues

 } // SVD class 

