
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 1.1
 *  @date    Sun Mar 16 21:19:13 EDT 2014
 *  @see     LICENSE (MIT style license file).
 */

package scalation.random

import math.pow

//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `Random2` class generates random real numbers in the range (0, 1).
 *  It is a second order (k = 2) Multiple Recursive Generator (MRG) shown to have
 *  good statistical properties for simulations.
 *  <br>
 *      x_i = (a1 x_i-1 + a2 x_i-2) % m
 *  <br>
 *  @see http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.120.1077&rep=rep1&type=pdf
 *  @see http://random.mat.sbg.ac.at/results/karl/server/node7.html
 *  @param stream  the random number stream index
 */
case class Random2 (stream: Int = 0)
{
    private val a1 = 11138366l           // first multiplier 	
    private val a2 = 11808124l           // second multiplier
    private val m  = 140737488355213l    // modulus

    def checkM: Boolean = m == pow (2, 47) - 115 

    /** The starting (stream 0) seed
     */
    private val seed0 = 1l

    /** Divide the main stream into
     *  10 mini-streams (0, 10, 20, 30, 40, 50, ... , 80, 90) or
     *  100 micro-streams (0, 1, 2, 3, 4, 5, ... , 98, 99)
     */
    private val nStreams = 100

    /** Seeds for all the streams  FIX
     */
    private val seeds: Array [Long] = Array (
                 1l,    2054618423l,    7999263932l,    1277953890l,    2682728002l,
        8355538080l,    4830021454l,    3929414814l,    1089222674l,    1580741903l,
         809555195l,    2717632235l,    7175650126l,    6952344063l,    2988067958l,
        5284951711l,    3079615556l,      15300810l,    3785043392l,    5649153646l,
        6301835101l,    7092284905l,    4540092147l,    4666709313l,    1001117845l,
        4263059332l,    4251095828l,    1345764873l,    8126784776l,    5309441349l,
        8407102731l,    1993905144l,    4142590931l,    2354344297l,    4709531018l,
        6060899471l,    6129890359l,    6196388105l,    3648280341l,    2883176831l,
           6835220l,    7578100113l,    8486096776l,     100487683l,    8250219927l,
        8573447168l,    5314218085l,    8566245490l,    8504000520l,    6893950438l,
        6620421794l,     928663362l,    3764775583l,    3172889993l,    3388442486l,
        5976358208l,     396676245l,    1948980175l,    1230123107l,     334682593l,
        4784108311l,    6039389851l,    6984461977l,    1490807498l,    7158533521l,
         516128780l,    3511548060l,    7397479429l,    3667416280l,    5984589647l,
        2111445732l,    7288853046l,    3621371940l,     468536893l,    3834276456l,
        1825603305l,    8084275714l,    7009164972l,    3909596445l,    8349319641l,
        8168186046l,    5903992386l,    6269627001l,    4251338580l,    6705492240l,
        4832972660l,    5684681584l,     104634090l,    1500686680l,    1209816588l,
        6373503190l,     325755960l,    4761644751l,    6749197125l,    1290789842l,
        5773188021l,    8091832448l,    8223717950l,    7676073986l,     724853815l)

    /** Set the stream value to the seed for that stream
     */
    private var x: Long = seeds(stream)      // multi-stream
    private var y = 0l
    private var t = 0l
//  private var x: Long = seed0              // uni-stream

    /** The reciprocal of the modulus
     */
    private val one_by_m: Double = 1.0 / m.toDouble

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the mean for the random number generator's gen method.
     */
    def mean: Double = 0.5

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the next random number as a Double in the interval (0, 1).
     *  Compute x_i = (a1 x_i-1 + a2 x_i-2) % m using x = (a1 x + a2 y) % m
     */
    def gen: Double =
    {
        t = x                          // save current x
        x = (a1 * x + a2 * y) % m      // compute new x
        y = t                          // current x becomes old x (i.e., y)
        x * one_by_m
    } // gen

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the next stream value as a Long in the set {1, 2, ... , m-1}.
     *  Compute x_i = (a1 x_i-1 + a2 x_i-2) % m using x = (a1 x + a2 y) % m
     */
    def lgen: Long =
    {
        t = x                          // save current x
        x = (a1 * x + a2 * y) % m      // compute new x
        y = t                          // current x becomes old x (i.e., y)
        x
    } // gen

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Find and print out 100 (nStreams) seed values as a val declaration that
     *  can be copied into a class to initialize the seeds (as done above).
     */
    def findSeeds
    {
        val streamLen = ((m - 1l) / nStreams).toLong
        println ("    private val seeds: Array [Long] = Array (")
        var seed = seed0
        for (i <- 0 until nStreams) {
            if (i % 5 != 4) {
                print ("\t" + seed + "l,")
                if (seed < 100000l) print ("\t")
            } else if (i != nStreams - 1) {
                println ("\t" + seed + "l,")
            } else {
                println ("\t" + seed + "l)")
            } // if
            var j = 0l
            while (j < streamLen) { seed = lgen; j += 1 }
//          for (j <- 0 until streamLen) seed = lgen         // limited to Int
        } // for
    } // find seeds

} // Random2 class


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The Random Number Generator `RNG2` object provides multiple pre-built
 *  random number streams.
 */
object RNG2
{
    /** Array of random number streams
     */
    val rand = Array [Random2] (
         Random2 (0),  Random2 (1),  Random2 (2),  Random2 (3),  Random2 (4),
         Random2 (5),  Random2 (6),  Random2 (7),  Random2 (8),  Random2 (9),
         Random2 (10), Random2 (11), Random2 (12), Random2 (13), Random2 (14),
         Random2 (15), Random2 (16), Random2 (17), Random2 (18), Random2 (19),
         Random2 (20), Random2 (21), Random2 (22), Random2 (23), Random2 (24),
         Random2 (25), Random2 (26), Random2 (27), Random2 (28), Random2 (29),
         Random2 (30), Random2 (31), Random2 (32), Random2 (33), Random2 (34),
         Random2 (35), Random2 (36), Random2 (37), Random2 (38), Random2 (39),
         Random2 (40), Random2 (41), Random2 (42), Random2 (43), Random2 (44),
         Random2 (45), Random2 (46), Random2 (47), Random2 (48), Random2 (49),
         Random2 (50), Random2 (51), Random2 (52), Random2 (53), Random2 (54),
         Random2 (55), Random2 (56), Random2 (57), Random2 (58), Random2 (59),
         Random2 (60), Random2 (61), Random2 (62), Random2 (63), Random2 (64),
         Random2 (65), Random2 (66), Random2 (67), Random2 (68), Random2 (69),
         Random2 (70), Random2 (71), Random2 (72), Random2 (73), Random2 (74),
         Random2 (75), Random2 (76), Random2 (77), Random2 (78), Random2 (79),
         Random2 (80), Random2 (81), Random2 (82), Random2 (83), Random2 (84),
         Random2 (85), Random2 (86), Random2 (87), Random2 (88), Random2 (89),
         Random2 (90), Random2 (91), Random2 (92), Random2 (93), Random2 (94),
         Random2 (95), Random2 (96), Random2 (97), Random2 (98), Random2 (99))

} // RNG2 object


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `SeedFinder2` object find seeds for all the random number streams.
 */
object SeedFinder2 extends App
{
    val rng = Random2 ()
    rng.findSeeds

} // SeedFinder2 object

